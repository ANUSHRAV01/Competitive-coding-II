*/
class Solution
{
    public:
     //Function to find first node if the linked list has a loop.
    int findFirstNode(Node* head)
    {
        // your code 
        if(head == NULL) return -1;
        Node* slow =head;
        Node* fast =head;
        
        while(fast !=NULL && fast ->next !=NULL){
            slow =slow->next;
            fast =fast->next;
            if(fast->next){
                fast =fast->next;
            }
            if(slow ==fast) break;
        }
        if(slow != fast) return -1;
        slow =head;
        while(slow !=fast){
            slow=slow->next;
            fast=fast->next;
        }
        return fast->data;
    }
};





//class Solution
{
    public:
     //Function to find first node if the linked list has a loop.
    int findFirstNode(Node* head)
    {
        // your code here
        
        while(Node* head !=NULL){
            int temp,temp1;
            Node* head =temp;
            Node* head->next =temp1;
            if(Node*head =temp && temp1 ==NULL) return temp;
            else if(Node*head =temp && temp1 != NULL) return findFirstNode(temp);
            else {
                return "-1";
            }
        }
        
        
    }
};//











