class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    
    Node* reverse(Node* head){
        Node* prev = NULL;
        Node* next;
        while(head){
            next =head->next;
            head->next= prev;
            prev =head;
            head =next;
        }
        return prev;
    }
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        
        first =reverse(first);
        second =reverse(second);
        
        Node* temp =new Node(0);
        Node* ans = temp;
        int carry =0;
        while(first || second || carry){
            int sum = carry;
            if(first){
                sum += first->data;
                first = first->next;
            }
            if(second){
                sum += second->data;
                second =second->next;
            }
            Node* newNode =new Node(sum%10);
            temp->next =newNode;
            temp =temp->next;
            carry =sum/10;
        }
        ans =reverse(ans->next);
        return ans;
        // code here
    }
};













//this is my basic approach that I started to think int he start
class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    struct Node* Sum(struct Node* first, struct Node* second, int n,int m){
        int Node* head = temp;
        int Node* next = temp1;
        
        while(Node != NULL){
            if(Node* next !=NULL){
                ans =(temp*(10*n));
                return ans+temp1;
            }
            
        }
    }
    
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
       return Sum(first,second,n,m);
        // code here
    }
};
